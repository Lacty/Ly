#pragma once

#include "lib/defines.hpp"
// ↑これは必ず最初にincludeする

#include "lib/appEnv.hpp"
// ↑必要なヘッダファイルは適時インクルードする
#include<iostream>
#include<vector>
#pragma warning(disable:4786)
using namespace std;

//共通の変数読み込み
#include "common.h"

/////////////////////////////////////////

//関数定義

int map[MAX_MAP_Y][MAX_MAP_X] = {
	{ 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,/*10*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*20*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*30*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*40*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*50*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*60*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*70*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0/*80*/ },//1

	{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,/*10*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*20*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*30*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*40*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*50*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*60*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*70*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0/*80*/ },//2

	{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,/*10*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*20*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*30*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*40*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*50*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*60*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*70*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0/*80*/ },//3

	{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,/*10*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*20*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*30*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*40*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*50*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*60*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*70*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0/*80*/ },//4

	{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,/*10*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*20*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*30*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*40*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*50*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*60*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*70*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0/*80*/ },//5

	{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,/*10*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*20*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*30*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*40*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*50*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*60*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*70*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0/*80*/ },//6

	{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,/*10*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*20*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*30*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*40*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*50*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*60*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*70*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0/*80*/ },//7

	{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,/*10*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*20*/0, 0, 0, 0, 1, 0, 0, 0, 0, 0,/*30*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*40*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*50*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*60*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*70*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0/*80*/ },//8

	{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,/*10*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*20*/0, 0, 0, 1, 1, 1, 0, 0, 0, 0,/*30*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*40*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*50*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*60*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0,/*70*/0, 0, 0, 0, 0, 0, 0, 0, 0, 0/*80*/ },//9

	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*10*/1, 1, 1, 1, 1, 0, 0, 1, 1, 1,/*20*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*30*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*40*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*50*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*60*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*70*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1/*80*/ },//10

	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*10*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*20*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*30*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*40*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*50*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*60*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*70*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1/*80*/ },//11

	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*10*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*20*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*30*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*40*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*50*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*60*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1,/*70*/1, 1, 1, 1, 1, 1, 1, 1, 1, 1/*80*/ }//12
};

//配列に配列代入できるようにする。

//1000×3  //基本は１０００/50×４


int pos_x(int pos_x){ //座標を左上を基本にする。
	return pos_x - WIDTH / 2;
};

int pos_y(int pos_y){ //座標を左上を基本にする。
	return pos_y + HEIGHT / 2 - size_y;
};

//マップチップ1の当たり判定
void map1_hit(int x, int y){
	//オブジェクト表示位置代入
	object_x = (pos_x(x*size_x) + camera_x);
	object_y = pos_y(-y*size_y);
	//オブジェクトの上辺(床の位置)代入
	floor_y = object_y + size_y;
	//着地処理
	if (jump == -1){
		if ((object_x > -player_size_x) && (object_x < player_size_x)){
			if ((player_y <= floor_y) && (player_y > floor_y - size_y)){
				jump = 0;
				gravity = 0;
				//床と接触させる(位置調整)　
				player_y = floor_y;
			}
		}
	}
	//壁の当たり判定
	//(+1、-1)→判定のめり込み防止
	if ((player_y + player_size_y > object_y + 1) && (player_y < object_y + size_y - 1)){
		if ((player_x < object_x + size_x + player_move_power) && (player_x + player_size_x > object_x)){
			wall_left = 1;
		}
	}
	if ((player_y + player_size_y > object_y + 1) && (player_y < object_y + size_y - 1)){
		if ((player_x + player_size_x > object_x - player_move_power) && (player_x < object_x + size_x)){
			wall_right = 1;
		}
	}
}

void map_set(){

	//X方向の当たり判定に使う変数の初期化
	wall_left = 0;
	wall_right = 0;

	for (int y = 0; y < MAX_MAP_Y; y++){
		for (int x = 0; x < MAX_MAP_X; x++){
			if (map[y][x] == 1){
				//当たり判定
				map1_hit(x,y);
				//オブジェクト表示
				drawFillBox(object_x, object_y,size_x, size_y, Color(1, 1, 1));
			}
		}
	}
}